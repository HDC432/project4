#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        self.expected_seq = 0
        self.buffer = {}

    def send(self, message):
        self.log("Sent message %s" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.remote_host, self.remote_port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            checksum = data[0:10]
            seq = int.from_bytes(data[10:18], "big")
            payload = data[18:].decode("utf-8")
            
            self.log("Received message %d %s" % (seq,payload))
            calculatedChecksum = hashlib.md5(data[10:]).digest()[:10]
            if checksum != calculatedChecksum:
                return None
            else:
                return {
                    "data": payload,
                    "seq": seq
                }

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                msg = self.recv(conn)
                
                if msg:
                    
                    seq_number = msg['seq']

                    if seq_number == self.expected_seq:
                        # Print out the data to stdout
                        print(msg["data"], end='', flush=True)
                        self.expected_seq += 1

                        while self.expected_seq in self.buffer:
                            buffer_msg = self.buffer.pop(self.expected_seq)
                            print(buffer_msg["data"], end='', flush=True)
                            self.expected_seq += 1

                    elif seq_number > self.expected_seq:
                        self.buffer[seq_number] = msg

                    # Always send back an ack
                    self.send({ "type": "ack", "seq": self.expected_seq - 1 })


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
