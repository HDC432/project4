#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib

DATA_SIZE = 1360
# Maybe we need to adjust data_size: packets are being dropped in low bandwidth

TIMEOUT = 1.0

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))

        self.window_size = 10
        self.base = 0
        self.next_seq_number = 0
        self.window = {}
        self.sent_times = {}
        self.last_transmit = time.time()
        self.packets_sent = 0

        # Code for congestion control
        self.congestion_window = 1
        self.sshthresh = 100
        self.dup_count = 0

        self.remote_host = None
        self.remote_port = None

        self.timeout = TIMEOUT

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.log("Sending message '%s'" % json.dumps(message))
        payload = json.dumps(message).encode("utf-8")
        checksum = hashlib.md5(payload).hexdigest()[:10]
        self.socket.sendto(checksum.encode("utf-8") + payload, (self.host, self.port))
        seq = message["seq"]
        self.window[seq] = message
        self.sent_times[seq] = time.time()
        self.last_transmit = time.time()

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            ack = ""
            try:
                ack = json.loads(data.decode("utf-8"))
                self.log("Received message %s" % data)
                seq = ack["seq"]
                if seq == self.base and seq in self.sent_times:
                    delay = time.time() -self.sent_times[seq]
                    self.timeout = (0.80*self.timeout) + (0.20*delay)
                    self.log("new timeout: " +  str(self.timeout))
            except Exception as e:
                ack = ""
            return ack

    def run(self):
        EOF = False

        while True:
            while not EOF and self.next_seq_number < min(self.window_size,self.congestion_window) + self.base:
                data = sys.stdin.read(DATA_SIZE)
                if not data:
                    self.log("Done!")
                    EOF = True
                    break
                
                msg = {"type": "msg", "data": data, "seq": self.next_seq_number}
                self.packets_sent+=1
                if self.congestion_window >= self.sshthresh:
                    if self.packets_sent >= self.congestion_window:
                        self.packets_sent -= self.congestion_window
                        self.congestion_window+=1
                self.send(msg)
                self.next_seq_number += 1

            socks = select.select([self.socket], [], [], 0.1)[0]
            if self.socket in socks:
                ack = self.recv(self.socket)
                if ack and ack["seq"] >= self.base:
                    for seq in list(self.window.keys()):
                        if seq <= ack["seq"]:
                            del self.window[seq]
                    self.base = ack["seq"] + 1
                    self.last_transmit = time.time()
                    if self.congestion_window < self.sshthresh:
                        self.congestion_window +=1
                else:
                    self.dup_count += 1
                    if self.dup_count >= 3:
                        self.dup_count = 0
                        self.send(self.window[self.base])
                        self.sshthresh  = self.congestion_window// 2
                        self.congestion_window = self.sshthresh + 3


            # Check for timeout
            if self.window and ((time.time() - self.last_transmit) > (self.timeout)):
                self.log(f"Time out! Resending from sequence number{self.base}")
                # for seq in range(self.base, self.next_seq_number):
                #     if seq in self.window:
                #         self.send(self.window[seq])
                self.send(self.window[seq])
                self.last_transmit = time.time()
                self.sshthresh //= 2
                self.congestion_window = 1

            
            if EOF and not self.window:
                self.log("All packets have been acknowledged.")
                sys.exit(0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
