#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib

# Set maximum data size per packet
DATA_SIZE = 1470
# Timeout interval for retransmission
TIMEOUT = 1.0

class Sender:
    def __init__(self, host, port):
        # Initialize Sender class with host, port, socket
        self.host = host
        self.port = int(port)
        self.counter = 0
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))

        # Code for window and sequence management
        self.window_size = 10
        self.base = 0
        self.next_seq_number = 0
        self.window = {}
        self.sent_times = {}
        self.last_transmit = time.time()
        self.packets_sent = 0

        # Code for congestion control
        self.congestion_window = 1
        self.sshthresh = 100
        self.dup_count = 0

        # Initialize remote host's address and port
        self.remote_host = None
        self.remote_port = None

        self.timeout = TIMEOUT


    # Function to print messages to stderr for debugging
    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()


    # Function to send data packets with checksum and sequence number
    def send(self, message, seq):
        self.log("Sending message '%d'" % seq)
        message = self.counter.to_bytes(2,"big") + message
        self.counter += 1
        # Calculate checksum and add it to packet
        checksum = hashlib.md5(message).digest()
        self.socket.sendto(checksum[:10] + message, (self.host, self.port))
        self.window[seq] = message[2:]
        self.last_transmit = time.time()


    # Function to receive and validate ACK packets
    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Set remote address if it's None
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Ignore invalid ACK packets
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote")
            return None
        else:
            data = bytearray(data)
            if (len(data) != 2):
                self.log("Error:  Invalid ack, dropping")
                return
            else:
                checksum = data[0]
                calculatedChecksum = data[1] + 1
                if (checksum != calculatedChecksum):
                    self.log("Error:  Corrupted ack, dropping")
                else:
                    return{
                        "seq": int(data[1])
                    }
                

    # Function to send data and handle acknowledgements
    def run(self):
        EOF = False
        while True:
            while not EOF and self.next_seq_number < min(self.window_size,self.congestion_window) + self.base:
                data = sys.stdin.read(DATA_SIZE)
                if not data:
                    self.log("Done!")
                    EOF = True
                    break
                
                # msg = {"type": "msg", "data": data, "seq": self.next_seq_number}
                msg = self.next_seq_number.to_bytes(2, "big") + data.encode("utf-8")
                self.packets_sent+=1
                if self.congestion_window >= self.sshthresh:
                    if self.packets_sent >= self.congestion_window:
                        self.packets_sent -= self.congestion_window
                        self.congestion_window+=1
                self.send(msg, self.next_seq_number)
                
                self.sent_times[self.next_seq_number] = time.time()
                self.next_seq_number += 1

            socks = select.select([self.socket], [], [], 0.1)[0]
            if self.socket in socks:
                ack = self.recv(self.socket)
                if ack and ack["seq"] >= self.base:
                    for seq in list(self.window.keys()):
                        if seq <= ack["seq"]:
                            del self.window[seq]
                    self.base = ack["seq"] + 1
                    self.last_transmit = time.time()
                    if self.congestion_window < self.sshthresh:
                        self.congestion_window +=1

                    seq = ack["seq"]
                    if seq in self.sent_times:
                        self.timeout = self.timeout * 0.8 + ((time.time() - self.sent_times[seq]) * 0.2)
                        self.log("New timeout: %f" % self.timeout)
                    self.dup_count = 0
                else:
                    self.dup_count += 1
                    if self.dup_count >= 3:
                        self.dup_count = 0
                        if self.base in self.sent_times:
                            del self.sent_times[self.base]
                        self.send(self.window[self.base], self.base)
                        
                        self.sshthresh  = self.congestion_window// 2
                        self.congestion_window = self.sshthresh + 3

            # Check for timeout
            if self.window and ((time.time() - self.last_transmit) > (self.timeout*1.2)):
                self.log(f"Time out! Resending from sequence number{self.base}")
                self.last_transmit = time.time()
                self.sshthresh //= 2
                self.congestion_window = 1
                self.send(self.window[self.base], self.base)
                if self.base in self.sent_times:
                    del self.sent_times[self.base]
                # for seq in range(self.base, self.next_seq_number):
                #     if seq in self.window:
                #         if seq in self.sent_times:
                #             del self.sent_times[seq]
                #         self.send(self.window[seq], seq)

            
            if EOF and not self.window:
                self.log("All packets have been acknowledged.")
                sys.exit(0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
